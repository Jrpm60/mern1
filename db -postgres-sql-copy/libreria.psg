CREATE SCHEMA IF NOT EXISTS biblioteca;


CREATE TABLE biblioteca.socios (
    id_socio SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    correo TEXT UNIQUE NOT NULL
);

CREATE TABLE biblioteca.libros (
    id_libro SERIAL PRIMARY KEY,
    titulo TEXT NOT NULL,
    autor TEXT NOT NULL
);

CREATE TABLE biblioteca.prestamos (
    id_prestamo SERIAL PRIMARY KEY,
    id_socio INT REFERENCES biblioteca.socios(id_socio),
    id_libro INT REFERENCES biblioteca.libros(id_libro),
    fecha_prestamo DATE NOT NULL,
    fecha_devolucion DATE
);

-- Socios
INSERT INTO biblioteca.socios (nombre, correo) VALUES
('Ana López', 'ana@correo.com'),         -- Ha hecho préstamos
('Carlos Pérez', 'carlos@correo.com'),   -- Ha hecho préstamos
('Lucía Gómez', 'lucia@correo.com'),     -- Ha hecho préstamos
('Mario Díaz', 'mario@correo.com');      -- NO ha hecho ningún préstamo

-- Libros
INSERT INTO biblioteca.libros (titulo, autor) VALUES
('Cien años de soledad', 'Gabriel García Márquez'),  -- Prestado
('El túnel', 'Ernesto Sabato'),                      -- Prestado
('Don Quijote de la Mancha', 'Miguel de Cervantes'), -- Prestado
('Rayuela', 'Julio Cortázar');                       -- NO ha sido prestado

-- Préstamos
INSERT INTO biblioteca.prestamos (id_socio, id_libro, fecha_prestamo, fecha_devolucion) VALUES
(1, 1, '2024-05-01', '2024-05-10'), -- Ana -> Cien años
(1, 2, '2024-05-11', NULL),         -- Ana -> El túnel
(2, 1, '2024-05-03', '2024-05-12'), -- Carlos -> Cien años
(3, 3, '2024-05-05', NULL);         -- Lucía -> Don Quijote

PARTE 1
Llevar a cabo lo siguiente:

Queremos saber si hay socios que aún no han realizado préstamos. Mostrar solo el socio que no ha realizado un préstamo.

SELECT nombre 
FROM biblioteca.socios AS s
LEFT JOIN biblioteca.prestamos AS p ON s.id_socio = p.id_socio
	WHERE p.id_libro is NULL



Muestra una lista de todos los préstamos, 
incluyendo el nombre del socio, el título del libro y la fecha del préstamo.

SELECT s.nombre, l.titulo, p.fecha_prestamo
FROM biblioteca.prestamos AS p
	INNER JOIN biblioteca.socios AS s ON p.id_socio = s.id_socio
		INNER JOIN biblioteca.libros AS l ON p.id_libro = l.id_libro


Queremos saber qué libros han sido prestados y cuáles no.

NO prestados

SELECT l.titulo, l.autor
FROM biblioteca.libros AS l
	LEFT JOIN biblioteca.prestamos AS p ON l.id_libro = p.id_libro
		WHERE p.fecha_prestamo IS NULL

SI prestados

SELECT l.titulo, l.autor
FROM biblioteca.libros AS l
	LEFT JOIN biblioteca.prestamos AS p ON l.id_libro = p.id_libro
		WHERE p.fecha_prestamo IS NOT NULL



Queremos saber qué libros estan actualmente prestados y a qué socio están prestados. 
Crear una vista llamada "vw_libros_prestados" para esta consulta, 
dandole permisos de lectura a la aplicacion de Python para sacar los informes.

SELECT l.titulo, s.nombre
FROM biblioteca.libros AS l
	INNER JOIN biblioteca.prestamos AS p ON l.id_libro = p.id_libro
	INNER JOIN biblioteca.socios AS s ON p.id_socio = s.id_socio
		WHERE p.fecha_devolucion IS NULL


SELECT * FROM biblioteca.vw_libros_prestados


Añadir unos nuevos libros a la tabla libros. 
scribir el código SQL. 'Ana Lopez' ha retirado dos libros más. 
Escribir el código SQL para insertar su prestámo.



Hoy, "Lucía Gómez" ha devuleto su libro "Don Quijote de la Mancha". 
Escribir el código SQL.






Queremos saber cuántos libros prestados tiene cada socio actualmente. 
Si el valor es mayor a 3, mostrar los resultados. 
Si es menos de 3, no hay ningun problema, asi que no les mostramos. 
De nuevo, Crear una vista llamada "vw_libros_prestados_importantes" para esta consulta, 
dandole permisos de lectura a la aplicacion de Python para sacar los informes.


FUNCIONES

CREATE FUNCTION scott.obtener_salario(p_empno INTEGER)
RETURNS NUMERIC AS $$
DECLARE
    salario NUMERIC;
BEGIN
    SELECT sal INTO salario FROM scott.emp WHERE empno = p_empno;
    RETURN salario;
END;
$$ LANGUAGE plpgsql;

uSO==========================================

SELECT scott.obtener_salario(7839);

SELECT *, scott.obtener_salario(empno)
FROM scott.emp

SELECT * FROM scott.emp
WHERE scott.obtener_salario(empno) > 1000
